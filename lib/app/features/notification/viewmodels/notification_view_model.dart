import 'package:get/get.dart';
import 'package:momentsy/app/data/models/friend_request_model.dart';
import 'package:momentsy/app/data/services/local/notification_service.dart';
import 'package:momentsy/app/data/services/local/shared_preferences_service.dart';
import 'package:momentsy/app/data/services/remote/friend_service.dart';
import 'package:momentsy/app/data/services/remote/socket_service.dart';

class NotificationViewModel extends GetxController {
  NotificationViewModel({
    required FriendService friendService,
    required SocketService socketService,
  }) : _friendService = friendService,
       _socketService = socketService;

  final FriendService _friendService;
  final SocketService _socketService; // ƒê·∫£m b·∫£o socketService ƒë∆∞·ª£c kh·ªüi t·∫°o
  final String? userId = SharedPreferencesService.getUserId();
  RxList<FriendRequestModel> friendRequests = <FriendRequestModel>[].obs;
  RxBool isLoading = false.obs;

  @override
  void onInit() {
    super.onInit(); // Kh·ªüi t·∫°o SocketService v·ªõi userId
    _getFriendRequests(); // L·∫•y danh s√°ch ban ƒë·∫ßu t·ª´ API
    _setupSocketListeners(); // Thi·∫øt l·∫≠p l·∫Øng nghe socket
  }

  Future<void> acceptFriendRequest(String requestId, String status) async {
    if (userId == null) {
      Get.snackbar('C·∫£nh b√°o', 'Vui l√≤ng ƒëƒÉng nh·∫≠p');
      return;
    }

    isLoading.value = true;
    final result = await _friendService.acceptFriendRequest(
      requestId,
      userId!,
      status,
    );
    isLoading.value = false;

    result.fold(
      (failure) {
        Get.snackbar('L·ªói', failure.message);
      },
      (message) async {
        Get.snackbar('Th√†nh c√¥ng', message);
        await Future.delayed(const Duration(seconds: 2));
        _getFriendRequests(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi x·ª≠ l√Ω
      },
    );
  }

  Future<void> _getFriendRequests() async {
    if (userId == null) {
      Get.snackbar('C·∫£nh b√°o', 'Vui l√≤ng ƒëƒÉng nh·∫≠p');
      return;
    }

    isLoading.value = true;
    final result = await _friendService.getFriendRequests(userId!);
    isLoading.value = false;

    result.fold(
      (failure) {
        print('L·ªói: ${failure.message}');
      },
      (requests) {
        friendRequests.assignAll(requests); // G√°n l·∫°i danh s√°ch t·ª´ API
      },
    );
  }

  void _setupSocketListeners() {
    // L·∫Øng nghe khi c√≥ l·ªùi m·ªùi k·∫øt b·∫°n m·ªõi
    _socketService.onFriendRequestReceived = (data) async {
      print("üì© Nh·∫≠n l·ªùi m·ªùi qua socket: $data");
      final friendRequest = FriendRequestModel.fromJson(data);

      if (!friendRequests.any((req) => req.id == friendRequest.id)) {
        await NotificationService.showNotification(
          id: friendRequest.id.hashCode,
          title: 'L·ªùi m·ªùi k·∫øt b·∫°n!',
          body: '${friendRequest.senderBy.name} ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n.',
        );
        friendRequests.add(friendRequest);
      }
    };

    // L·∫Øng nghe khi l·ªùi m·ªùi ƒë∆∞·ª£c ch·∫•p nh·∫≠n
    _socketService.onFriendRequestAccepted = (data) async {
      print("‚úÖ L·ªùi m·ªùi ƒë∆∞·ª£c ch·∫•p nh·∫≠n qua socket: $data");
      final requestId = data['requestId']?.toString();
      final message = data['message']?.toString();
      if (requestId != null) {
        await NotificationService.showNotification(
          id: requestId.hashCode,
          title: 'Th√¥ng b√°o k·∫øt b·∫°n',
          body: message ?? 'Y√™u c·∫ßu k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n.',
        );
        friendRequests.removeWhere((req) => req.id == requestId);
      } else {
        _getFriendRequests(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch n·∫øu d·ªØ li·ªáu kh√¥ng ch√≠nh x√°c
      }
    };
  }

  @override
  void onClose() {
    _socketService.dispose(); // ƒê·∫£m b·∫£o gi·∫£i ph√≥ng socket khi ƒë√≥ng
    super.onClose();
  }
}
